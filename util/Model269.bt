//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct {
    char fileHash[16] <hidden=true>;
    uint32 numEntries;
    uint32 entryLen <hidden=true>;
    char entryStr[entryLen];
    uint32 propsLen <hidden=true>;
    char propsStr[propsLen];
    if (propsLen != 0) {
        FSkip(1);
    }
    uint32 fileTypeEnum;
} commonHeader;

typedef struct {
    uint32 nameLen <bgcolor=cNone>;
    char name[nameLen];
} boneNameEntry;

typedef struct {
    uint32 boneNameLen;
    char name[boneNameLen];
    uint16 parentID;
    uint16 ID;
} boneTreeNode;

typedef struct {
    FSkip(0x10);
    uint32 nameLen;
    char name[nameLen];
    FSkip(0x4C);
} unkStruct;

typedef struct {
    float vec1[4];
    float vec2[4];
    uint32 meshNameLen;
    char meshName[meshNameLen];
    uint32 faceLODOffsets[5];
    uint32 faceLODLengths[5];
    FSkip(0x34);
} meshInfo;

typedef struct {
    uint32 nameLen <bgcolor=cNone>;
    char name[nameLen];
    uint32 unkNum <bgcolor=cNone>;
} morphNameEntry;

typedef struct {
    uint32 boneMapBoneCount;
    uint32 boneMapNums[boneMapBoneCount] <hidden=true,optimize=false>;
} boneMap;

typedef struct {
    // strange array
    local int x;
    for (x = 0; x < 4; x++) {
        uint32 subArrCount <hidden=true>;
        FSkip(subArrCount * 4);
    }
    
    uint32 morphNameCount;
    boneNameEntry morphnames[morphNameCount] <optimize=false>;

    uint32 unkArrCount;
    FSkip(unkArrCount * 4);
} morphStruct;

typedef struct {
    uint32 meshType;
    if (meshType == 1) {
        FSkip(0x4C);
    } else {
        FSkip(0x50);
    }
    float vec1[4];
    float vec2[4];
    if (meshType != 3 && meshType != 2 && meshType != 0) {
        FSkip(4);
    }
    int32 numCheck;
    uint32 meshLen;
    uint32 unkLen;
    uint32 unkNum;
} meshPhysX;

typedef struct {
    FSkip(0x1C);
    uint32 LODs[5] <optimize=false>;
    uint32 unkScalar1;
    uint32 unkScalar2;

    uint32 physicsPath1Len;
    if (physicsPath1Len != 0) {
        uint16 strCheck;
        if (strCheck != 0) {
            char physPath1[physicsPath1Len-2];
        }
    }
    
    uint32 unkScalar3;
    uint32 unkFlags1 <format=hex>;

    FSkip(0x10);
    float floatTest;

    FSkip(0x10);
    float vec1[4];
    float vec2[4];

    uint32 boneArrCount;
    boneNameEntry bones[boneArrCount] <optimize=false,hidden=true>;

    uint32 faceCount;
    uint32 boneCount;
    uint32 vertexCount;
    uint32 morphCount;

    FSkip(0x8);
    uint32 unkArrLen;
    uint64 unkArrNums[unkArrLen] <optimize=false>;
    FSkip(0x31);
    
    uint32 boneTreeLen;
    boneTreeNode boneTree[boneTreeLen] <hidden=true,optimize=false>;

    uint32 unkStructArrLen;
    unkStruct unknownStruct[unkStructArrLen] <optimize=false>;

    uint32 randomAlways1Int;
    FSkip(0x1A);
    FSkip(unkStructArrLen * 0x10);
    FSkip(0x8);

    uint32 meshInfoCount;
    meshInfo meshInfos[meshInfoCount] <hidden=true,optimize=false>;

    uint32 unkWordCount;
    FSkip(unkWordCount * 2);

    uint32 morphArrayLen;
    morphNameEntry morphNameArr[morphArrayLen] <hidden=true,optimize=false>;

    uint32 boneMapCount;
    boneMap boneMaps[boneMapCount] <optimize=false>;

    uint32 morphStructArrCount;
    morphStruct morphStructArray[morphStructArrCount] <optimize=false>;

    FSkip(0x37);

    uint32 physicsPath2Len;
    if (physicsPath2Len != 0) {
        uint16 strCheck;
        if (strCheck != 0) {
            char physPath2[physicsPath2Len-2];
        }
    }

    uint32 physXArrLen;
    meshPhysX physXArray[physXArrLen] <optimize=false>;

    uint32 errorCount;
    boneNameEntry errors[errorCount] <optimize=false>;
} model269;

SetBackColor(cRed);
commonHeader CommonHeader;
model269 Model;