//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct {
    char fileHash[16] <hidden=true>;
    uint32 numEntries;
    uint32 entryLen <hidden=true>;
    char entryStr[entryLen];
    uint32 propsLen <hidden=true>;
    char propsStr[propsLen];
    if (propsLen != 0) {
        FSkip(1);
    }
    uint32 fileTypeEnum;
} commonHeader;

typedef struct {
    uint32 nameLen <bgcolor=cNone,hidden=true>;
    char name[nameLen];
} basicString;

typedef struct {
    uint16 physPathCheck <hidden=true>;
    if (physPathCheck > 0) {
        local uint32 physPathLen;
        if (physPathCheck == 255) {
            uint32 readLen <hidden=true>;
            physPathLen = readLen;
        } else {
            physPathLen = physPathCheck;
            FSkip(0x2);
        }
        // Because the path may not actually exist...
        if (physPathLen > 0) {
            uint16 nullCheck <hidden=true>;
            if (nullCheck != 0) {
                FSkip(-2);
                char physicsPath[physPathLen];
            }
        }
    } else {
        FSkip(0x2);
    }
} physicsPathv2;

typedef struct {
    float vec1[4];
    float vec2[4];
    uint32 meshNameLen;
    char meshName[meshNameLen];
    uint32 faceLODOffsets[5];
    uint32 faceLODLengths[5];
    FSkip(0x20);
    uint32 unkNameLen <hidden=true>;
    char unkName[unkNameLen];
    FSkip(0x10);
} meshInfo;

typedef struct {
    uint32 meshType;
    if (meshType == 1) {
        FSkip(0x4C);
    } else {
        FSkip(0x50);
    }
    float vec1[4];
    float vec2[4];
    if (meshType != 3 && meshType != 2 && meshType != 0) {
        FSkip(4);
    }
    int32 numCheck;
    uint32 meshLen;
    uint32 unkLen;
    uint32 unkNum;
} meshPhysX;

typedef struct {
    FSkip(0x1C);
    uint32 LODs[5] <optimize=false>;
    uint32 unkScalar1;
    uint32 unkScalar2;

    physicsPathv2 physPath1;
    
    uint32 unkScalar3;
    uint32 unkFlags1 <format=hex>;

    FSkip(0x10);
    float floatTest;

    if (unkScalar3 != 3) {
        FSkip(0x12);
    } else {
        FSkip(0x10);
    }
    float vec1[4];
    float vec2[4];

    uint32 vertexCount;
    uint32 faceCount;
    uint32 morphCount;

    FSkip(0x1C);
    uint32 unkArrLen;
    BigEndian();
    uint64 unkArrNums[unkArrLen] <optimize=false>;
    LittleEndian();    

    FSkip(0xC);
    uint32 somePathLen <hidden=true>;
    char somePath[somePathLen];
    FSkip(0x41);

    uint32 meshInfoCount;
    meshInfo meshInfos[meshInfoCount] <optimize=false>;

    uint32 shortArrLen <hidden=true>;
    FSkip(shortArrLen * 2);
    
    FSkip(0x8);
    physicsPathv2 physPath2;
    
    uint32 physXArrLen;
    meshPhysX physXArray[physXArrLen] <optimize=false>;

    uint32 errorCount;
    basicString errors[errorCount] <optimize=false>;
} model96;

LittleEndian();
SetBackColor(cRed);
commonHeader CommonHeader;
model96 Model;