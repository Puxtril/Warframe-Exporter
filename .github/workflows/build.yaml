name: Compile

run-name: ${{ github.ref_name }} - ${{ github.event.head_commit.message }}
on:
  push:

jobs:
  Compile-Windows:
    runs-on: windows-2025
    defaults:
      run:
        shell: powershell
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install MSVC
        uses: ilammy/msvc-dev-cmd@v1
      - name: Install qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.7.1
          host: 'windows'
          arch: 'win64_msvc2019_64'
          install-deps: 'true'
          setup-python: 'true'
          cache: 'true'
      - name: Download and compile Zlib
        run: |
          mkdir zlib
          cd zlib
          Invoke-WebRequest -Uri https://zlib.net/zlib-1.3.1.tar.gz -OutFile zlib.tar.gz
          tar -xzf .\zlib.tar.gz
          mkdir build
          cd build
          cmake ..\zlib-1.3.1 -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\zlib\install
          cmake --build . --config Release
          cmake --install .
          cd ..\install\lib
          mv zlib.lib zlib-dynamic.lib
          mv zlibstatic.lib zlib.lib
      - name: Init Extractor submodules
        run: |
          cd lib
          git submodule update --init --depth 1 Binary-Reader LotusLib QtOpenGLViewer bcdec ddspp fx-gltf glm json libspng spdlog PhysxParser
          git submodule update --init tclap-code
      - name: Init LotusLib submodule
        run: |
          cd lib/LotusLib/lib
          git submodule update --init
      - name: Download Oodle binaries
        run: |
          mkdir bin\Win64
          cd bin\Win64
          Invoke-WebRequest -Uri https://github.com/WorkingRobot/OodleUE/raw/main/Engine/Source/Runtime/OodleDataCompression/Sdks/2.9.12/lib/Win64/oo2core_win64.lib -Outfile oo2core_win64.lib
      - name: Initilize CMake
        run: |
          mkdir build
          cd build
          cmake .. -DZLIB_ROOT=${{ github.workspace }}\zlib\install
      - name: Compile project
        run: |
          cd build
          cmake --build . --config Release -j8
      - name: Link Qt Requirements
        run: |
          & "windeployqt.exe" build\Release\Warframe-Exporter.exe
      - name: Zip Exporter GUI and Qt Dependencies to Artifacts folder
        run: |
          mkdir artifacts
          cd build\Release
          Compress-Archive -DestinationPath ..\..\artifacts\Warframe-Exporter.zip -Path "Warframe-Exporter.exe", "Qt6Core.dll", "Qt6Gui.dll", "Qt6OpenGL.dll", "Qt6OpenGLWidgets.dll", "Qt6Widgets.dll", "d3dcompiler_47.dll", "platforms"
      - name: Copy CLI executables to Artifacts folder
        run: |
          cp build\Release\Warframe-Exporter-CLI.exe artifacts
          cp build\Release\Warframe-Exporter-CLI-Advanced.exe artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: Warframe-Exporter-Windows
          path: artifacts/
  
  Compile-Linux:
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt update && sudo apt install -y wget git make cmake g++ zlib1g-dev libglu1-mesa-dev qt6-base-dev
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Init Extractor submodules
        run: |
          cd lib
          git submodule update --init --depth 1 Binary-Reader LotusLib QtOpenGLViewer bcdec ddspp fx-gltf glm json libspng spdlog PhysxParser
          git submodule update --init tclap-code
      - name: Init LotusLib submodule
        run: |
          cd lib/LotusLib/lib
          git submodule update --init
      - name: Download Oodle binaries
        run: |
          mkdir bin\Linux
          cd bin\Linux
          Invoke-WebRequest -Uri https://github.com/WorkingRobot/OodleUE/raw/refs/heads/main/Engine/Source/Runtime/OodleDataCompression/Sdks/2.9.12/lib/Linux/liboo2corelinux64.a -Outfile liboo2corelinux64.a
      - name: Initilize CMake
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=/usr
      - name: Compile project
        run: |
          cd build
          cmake --build . --config Release -j8
      - name: Download Appimage
        run: |
          cd build
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
      - name: Create UI Appimage
        run: |
          cd build
          mkdir AppDir-ui
          cp ../DesktopEntry.desktop AppDir-ui/DesktopEntry.desktop
          cat "Name=Warframe Exporter" >> AppDir-ui/DesktopEntry.desktop
          cat "Exec=Warframe-Exporter" >> AppDir-ui/DesktopEntry.desktop
          ./linuxdeploy-x86_64.AppImage --appdir AppDir-ui -i ../assets/AppIcon.png -d AppDir-ui/DesktopEntry.desktop -e Warframe-Exporter --output appimage
      - name: Create CLI Appimage
        run: |
          cd build
          mkdir AppDir-cli
          cp ../DesktopEntry.desktop AppDir-cli/DesktopEntry.desktop
          cat "Name=Warframe Exporter CLI" >> AppDir-cli/DesktopEntry.desktop
          cat "Exec=Warframe-Exporter-CLI-Advanced" >> AppDir-cli/DesktopEntry.desktop
          cat "Terminal=true" >> AppDir-cli/DesktopEntry.desktop
          ./linuxdeploy-x86_64.AppImage --appdir AppDir-cli -i ../assets/AppIcon.png -d AppDir-ui/DesktopEntry.desktop -e Warframe-Exporter --output appimage