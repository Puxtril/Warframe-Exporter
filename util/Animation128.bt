//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct {
    uint32 nameLen <bgcolor=cNone>;
    char name[nameLen];
} basicString;


typedef struct {
    char fileHash[16] <hidden=true>;
    uint32 numEntries;
    basicString paths[numEntries] <optimize=false>;
    uint32 propsLen <hidden=true>;
    char propsStr[propsLen];
    if (propsLen != 0) {
        FSkip(1);
    }
    uint32 fileTypeEnum;
} commonHeader;


// Used in animationSkeleton
typedef struct {
    uint32 boneNameLen;
    char name[boneNameLen];
    uint16 parentID;
    uint16 ID;
} boneTreeNode;


// Used in animationSkeleton
typedef struct {
    FSkip(0x10);
    uint32 nameLen <hidden=true>;
    char name[nameLen];
    FSkip(0x44);
    uint32 strideLen;
    uint32 offset;
} actionStruct;

typedef struct {
    FSkip(0xC);
    uint32 frameCount;
} actionStruct2;


typedef struct {
    basicString skeleName;

    uint32 unkNum <hidden=true>;
    if (unkNum > 0) {
        FSkip(1);
    }
    FSkip(4);

    float vec1[4];
    float vec2[4];
    
    uint32 boneTreeCount;
    boneTreeNode boneTree[boneTreeCount] <hidden=true,optimize=false>;

    uint32 actionCount;
    actionStruct skeleStruct[actionCount] <optimize=false,hidden=false>;

    FSkip(0x1A);
    uint32 frameDataLen;
    
    actionStruct2 skips[actionCount] <optimize=false>;    

    FSkip(8);
} animationSkeleton;
 
   
typedef struct {
    basicString somePath1;
    basicString somePath2;
    FSkip(0x2);
    float importScale[3];
    FSkip(0x4C);

    uint32 skeletonCount;
    animationSkeleton skeles[skeletonCount] <optimize=false>;
} Animation128;


commonHeader header;
Animation128 animation;